.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.const @NULLREF <@refvoid> = NULL

.funcdef @binops32 <@void (@i32 @i32)> (%p0 %p1) {
    %add  = ADD  <@i32> %p0 %p1
    %sub  = SUB  <@i32> %p0 %p1
    %mul  = MUL  <@i32> %p0 %p1
    %udiv = UDIV <@i32> %p0 %p1
    %sdiv = SDIV <@i32> %p0 %p1
    %urem = UREM <@i32> %p0 %p1
    %srem = SREM <@i32> %p0 %p1
    %shl  = SHL  <@i32> %p0 %p1
    %lshr = LSHR <@i32> %p0 %p1
    %ashr = ASHR <@i32> %p0 %p1
    %and  = AND  <@i32> %p0 %p1
    %or   = OR   <@i32> %p0 %p1
    %xor  = XOR  <@i32> %p0 %p1
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %add %sub %mul %udiv %sdiv %urem %srem
        %shl %lshr %ashr %and %or %xor
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @binops64 <@void (@i64 @i64)> (%p0 %p1) {
    %add  = ADD  <@i64> %p0 %p1
    %sub  = SUB  <@i64> %p0 %p1
    %mul  = MUL  <@i64> %p0 %p1
    %udiv = UDIV <@i64> %p0 %p1
    %sdiv = SDIV <@i64> %p0 %p1
    %urem = UREM <@i64> %p0 %p1
    %srem = SREM <@i64> %p0 %p1
    %shl  = SHL  <@i64> %p0 %p1
    %lshr = LSHR <@i64> %p0 %p1
    %ashr = ASHR <@i64> %p0 %p1
    %and  = AND  <@i64> %p0 %p1
    %or   = OR   <@i64> %p0 %p1
    %xor  = XOR  <@i64> %p0 %p1
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %add %sub %mul %udiv %sdiv %urem %srem
        %shl %lshr %ashr %and %or %xor
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @binops_ovf <@noparamsnoret> () {
    %add  = ADD  <@i64> 0x7fffffffffffffff 1
    %add2 = ADD  <@i64> 0xffffffffffffffff 0x2
    %mul  = MUL  <@i64> 1000000000000 1000000000000
    %udiv = UDIV  <@i64> 0x8000000000000000 2
    %urem = UREM  <@i64> 0x8000000000000000 3
 
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %add %add2 %mul %udiv %urem
        
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @binops_f <@void (@float @float)> (%p0 %p1) {
    %fadd = FADD <@float> %p0 %p1
    %fsub = FSUB <@float> %p0 %p1
    %fmul = FMUL <@float> %p0 %p1
    %fdiv = FDIV <@float> %p0 %p1
    %frem = FREM <@float> %p0 %p1
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %fadd %fsub %fmul %fdiv %frem
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @binops_d <@void (@double @double)> (%p0 %p1) {
    %fadd = FADD <@double> %p0 %p1
    %fsub = FSUB <@double> %p0 %p1
    %fmul = FMUL <@double> %p0 %p1
    %fdiv = FDIV <@double> %p0 %p1
    %frem = FREM <@double> %p0 %p1
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %fadd %fsub %fmul %fdiv %frem
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @cmp64 <@void (@i64 @i64)> (%p0 %p1) {
    %eq  = EQ  <@i64> %p0 %p1
    %ne  = NE  <@i64> %p0 %p1
    %ult = ULT <@i64> %p0 %p1
    %ule = ULE <@i64> %p0 %p1
    %ugt = UGT <@i64> %p0 %p1
    %uge = UGE <@i64> %p0 %p1
    %slt = SLT <@i64> %p0 %p1
    %sle = SLE <@i64> %p0 %p1
    %sgt = SGT <@i64> %p0 %p1
    %sge = SGE <@i64> %p0 %p1
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %eq %ne %ult %ule %ugt %uge %slt %sle %sgt %sge
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @cmp_f <@void (@float @float)> (%p0 %p1) {
    %ftrue  = FTRUE  <@float> %p0 %p1
    %ffalse = FFALSE <@float> %p0 %p1
    %ford   = FORD   <@float> %p0 %p1
    %foeq   = FOEQ   <@float> %p0 %p1
    %fone   = FONE   <@float> %p0 %p1
    %folt   = FOLT   <@float> %p0 %p1
    %fole   = FOLE   <@float> %p0 %p1
    %fogt   = FOGT   <@float> %p0 %p1
    %foge   = FOGE   <@float> %p0 %p1
    %funo   = FUNO   <@float> %p0 %p1
    %fueq   = FUEQ   <@float> %p0 %p1
    %fune   = FUNE   <@float> %p0 %p1
    %fult   = FULT   <@float> %p0 %p1
    %fule   = FULE   <@float> %p0 %p1
    %fugt   = FUGT   <@float> %p0 %p1
    %fuge   = FUGE   <@float> %p0 %p1

    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %ftrue %ffalse %ford %foeq %fone %folt %fole %fogt %foge
        %funo %fueq %fune %fult %fule %fugt %fuge
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @cmp_d <@void (@double @double)> (%p0 %p1) {
    %ftrue  = FTRUE  <@double> %p0 %p1
    %ffalse = FFALSE <@double> %p0 %p1
    %ford   = FORD   <@double> %p0 %p1
    %foeq   = FOEQ   <@double> %p0 %p1
    %fone   = FONE   <@double> %p0 %p1
    %folt   = FOLT   <@double> %p0 %p1
    %fole   = FOLE   <@double> %p0 %p1
    %fogt   = FOGT   <@double> %p0 %p1
    %foge   = FOGE   <@double> %p0 %p1
    %funo   = FUNO   <@double> %p0 %p1
    %fueq   = FUEQ   <@double> %p0 %p1
    %fune   = FUNE   <@double> %p0 %p1
    %fult   = FULT   <@double> %p0 %p1
    %fule   = FULE   <@double> %p0 %p1
    %fugt   = FUGT   <@double> %p0 %p1
    %fuge   = FUGE   <@double> %p0 %p1

    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %ftrue %ffalse %ford %foeq %fone %folt %fole %fogt %foge
        %funo %fueq %fune %fult %fule %fugt %fuge
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @select <@noparamsnoret> () {
    %sel1 = SELECT <@i64> @TRUE  2 3
    %sel2 = SELECT <@i64> @FALSE 2 3

    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %sel1 %sel2
        )
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable

}

.funcdef @conv <@void (@i32 @i64 @float @double)> (%p0 %p1 %p2 %p3) {
    %trunc = TRUNC <@i64 @i32> %p1
    %zext  = ZEXT  <@i32 @i64> %p0
    %sext  = SEXT  <@i32 @i64> %p0
    
    %fptrunc = FPTRUNC <@double @float> %p3
    %fpext   = FPEXT   <@float @double> %p2
    
    %fptoui  = FPTOUI  <@double @i64> %p3
    %fptosi  = FPTOSI  <@double @i64> %p3
    %uitofp  = UITOFP  <@i64 @double> %p1
    %sitofp  = SITOFP  <@i64 @double> %p1
    
    %bitcast = BITCAST <@double @i64> %p3
    
    %trap = TRAP <@void> %exit %exit KEEPALIVE (
        %trunc %zext %sext %fptrunc %fpext %fptoui %fptosi %uitofp %sitofp
        %bitcast
        )
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @branch <@void (@i64)> (%p0) {
    %cmpz = EQ <@i64> %p0 0
    BRANCH2 %cmpz %iftrue %iffalse
    
%iftrue:
    %traptrue = TRAP <@void> %exit %exit KEEPALIVE ()
    
%iffalse:
    %trapfalse = TRAP <@void> %exit %exit KEEPALIVE ()
    
%exit:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @switch_phi <@void (@i64)> (%p0) {
    SWITCH <@i64> %p0 %def {
        1: %one;
        2: %two;
        3: %three;
    }
    
%def:
    %trapdef = TRAP <@void> %exit %exit KEEPALIVE ()
    
%one:
    %trapone = TRAP <@void> %exit %exit KEEPALIVE ()
    
%two:
    %traptwo = TRAP <@void> %exit %exit KEEPALIVE ()
    
%three:
    %trapthree = TRAP <@void> %exit %exit KEEPALIVE ()
    
%exit:
    %phi = PHI <@i64> {
        %def: 10;
        %one: 11;
        %two: 12;
        %three: 13;
    }
    %trapend = TRAP <@void> %exit2 %exit2 KEEPALIVE (%phi)
%exit2:
    ICALL @uvm.thread_exit ()
    RETVOID // unreachable
}

.funcdef @square_sum <@i_ii> (%a %b) {
    %a2 = MUL <@i64> %a %a
    %b2 = MUL <@i64> %b %b
    %s  = ADD <@i64> %a2 %b2
    RET <@i64> %s
}

.funcdef @call_ret <@i_ii> (%a %b) {
    %ss = CALL <@i_ii> @square_sum (%a %b)
    %trap = TRAP <@void> %exit %exit KEEPALIVE (%ss)
%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

.funcdef @thrower <@noparamsnoret> () {
    THROW @NULLREF
}

.funcdef @invoke_landingpad <@noparamsnoret> () {
    %ss = INVOKE <@noparamsnoret> @thrower () %nor %exc
%nor:
    %trapnor = TRAP <@void> %exit %exit KEEPALIVE ()
%exc:
    %lp = LANDINGPAD
    %trapexc = TRAP <@void> %exit %exit KEEPALIVE (%lp)
%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

// Some simple struct constants

.typedef @StructFoo = struct <@i32 @i64 @float @double>

.const @STRUCT_FOO <@StructFoo> = {1 2 3.0f 4.0d}

.funcdef @aggregate <@noparamsnoret> () {
    %f1 = EXTRACTVALUE <@StructFoo 1> @STRUCT_FOO
    %s2 = INSERTVALUE <@StructFoo 1> @STRUCT_FOO 222
    %f12 = EXTRACTVALUE <@StructFoo 1> %s2
    %trapnor = TRAP <@void> %exit %exit KEEPALIVE (%f1 %f12)
%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

.typedef @refi64 = ref<@i64>
.typedef @irefi64 = iref<@i64>
.typedef @weakrefi64 = weakref<@i64>

.typedef @StructBar = struct <
    @i64 @i32 @i16 @i8 @float @double
    @refi64 @irefi64 @weakrefi64
>

.typedef @refBar = ref<@StructBar>
.typedef @irefBar = iref<@StructBar>

.typedef @hCharArray = hybrid<@i64 @i8>

.funcdef @allocs <@void (@i64)> (%sz) {
    %new = NEW <@StructBar>
    %newhybrid = NEWHYBRID <@hCharArray> %sz
    %alloca = ALLOCA <@StructBar>
    %allocahybrid = ALLOCAHYBRID <@hCharArray> %sz

    %trap = TRAP <@void> %exit %exit KEEPALIVE (%new %newhybrid %alloca %allocahybrid)
%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

///////////////////////// Simple sum

.funcdef @simplesum <@void (@i64 @i64)> (%from %to) {
%entry:
    //BRANCH %head
    %starttrap = TRAP <@void> %head %head KEEPALIVE ()

%head:
    %sum = PHI <@i64> { %entry: 0; %body: %sum2; }
    %i   = PHI <@i64> { %entry: %from; %body: %i2; }
    %le  = SLE <@i64> %i %to
    BRANCH2 %le %body %exit
    
%body:
    %sum2 = ADD <@i64> %sum %i
    %i2   = ADD <@i64> %i 1
    BRANCH %head
    //%montrap = TRAP <@void> %head %head KEEPALIVE (%from %to %sum %i %le %sum2 %i2)

%exit:
    %exittrap = TRAP <@void> %exit %exit KEEPALIVE (%sum) // should stop thread
    RETVOID // unreachable
}
.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.typedef @funcdumb = func<@noparamsnoret>

.typedef @thread = thread
.typedef @stack = stack
.typedef @tagref64 = tagref64

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.typedef @irefvoid = iref<@void>
.typedef @weakrefvoid = weakref<@void>
.const @NULLREF <@refvoid> = NULL

.typedef @StructFoo = struct <@i32 @i64 @float @double>

.const @STRUCT_FOO <@StructFoo> = {1 2 3.0f 4.0d}

.typedef @refi64 = ref<@i64>
.typedef @irefi64 = iref<@i64>
.typedef @weakrefi64 = weakref<@i64>

.typedef @StructBar = struct <
    @i64 @i32 @i16 @i8 @float @double
    @refi64 @irefi64 @weakrefi64
>

.typedef @refBar = ref<@StructBar>
.typedef @irefBar = iref<@StructBar>

.typedef @hCharArray = hybrid<@i64 @i8>

.typedef @ArrayBaz = array <@i16 1024>
.const @THREE <@i64> = 3

.typedef @JavaLikeByteArray = hybrid <@i32 @i8>

.const @I64_1024 <@i64> = 1024

.global @g_i8   <@i8>
.global @g_i16  <@i16>
.global @g_i32  <@i32>
.global @g_i64  <@i64>
.global @g_f    <@float>
.global @g_d    <@double>
.global @g_r    <@refvoid>
.global @g_ir   <@irefvoid>
.global @g_wr   <@weakrefvoid>
    
.global @g_func <@funcdumb>
    
.global @g_thr  <@thread>
.global @g_sta  <@stack>
.global @g_tr64 <@tagref64>

.const @I64_30000 <@i64> = 30000

.const @CRAZY_ALLOC_COUNT <@i64> = 100

.global @g_refi64 <@refi64>

.funcdef @keepglobal <@noparamsnoret> () {
    CALL <@noparamsnoret> @storeglobal ()
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()

%next:
    %obj2 = LOAD <@refi64> @g_refi64
    %obj2iref = GETIREF <@i64> %obj2
    %obj2val = LOAD <@i64> %obj2iref
    
    %checktrap = TRAP <@void> %exit %exit KEEPALIVE (%obj2 %obj2val)
    
%exit:
    STORE <@refi64> @g_refi64 NULL
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}

.funcdef @storeglobal <@noparamsnoret> () {
    %obj = NEW <@i64>
    STORE <@refi64> @g_refi64 %obj
    %iref = GETIREF <@i64> %obj
    STORE <@i64> %iref 42
    RETVOID
}

.funcdef @nokeepalloca <@noparamsnoret> () {
    CALL <@noparamsnoret> @allocatest ()
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()

%next:
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}

.funcdef @allocatest <@noparamsnoret> () {
    %alloca = ALLOCA <@refi64>
    
    CALL <@allocasettersig> @allocasetter (%alloca)
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()
    
%next:
    RETVOID
}

.funcsig @allocasettersig = @void (@irefi64)

.funcdef @allocasetter <@allocasettersig> (%ir) {
    %obj = NEW <@i64>
    %iref = GETIREF <@i64> %obj
    STORE <@i64> %iref 42

    STORE <@refi64> %ir %obj
    
    RETVOID
}

.funcdef @crazy_allocator <@noparamsnoret> () {
%entry:
    BRANCH %head
    
%head:
    %togo = PHI <@i64> { %entry: @CRAZY_ALLOC_COUNT; %body: %togo2; }
    %nz = NE <@i64> %togo 0
    BRANCH2 %nz %body %exit

%body:
    NEWHYBRID <@hCharArray> @I64_30000
    %togo2 = SUB <@i64> %togo 1
    BRANCH %head

%exit:
    RETVOID
}

.typedef @refi64array = hybrid <@void @refi64>

.const @REM_SZ <@i64> = 2000
.const @REM_PER_ALLOC <@i64> = 100000
.const @NALLOCS <@i64> = 2000000

.funcdef @breadcrumbs <@noparamsnoret> () {
%entry:
    %remember = NEWHYBRID <@refi64array> @REM_SZ
    %rememberiref = GETIREF <@refi64array> %remember
    %remv = GETVARPARTIREF <@refi64array> %rememberiref
    
    BRANCH %head
    
%head:
    %i = PHI <@i64> { %entry: 0; %next: %i2; }
    %nrem = PHI <@i64> { %entry: 0; %next: %nrem3; }
    %enough = SLT <@i64> %i @NALLOCS
    BRANCH2 %enough %body %exit

%body:
    %obj = NEW <@i64>
    %rem = SREM <@i64> %i @REM_PER_ALLOC
    %z = EQ <@i64> %rem 0
    BRANCH2 %z %body2 %next

%body2:
    %loc = SHIFTIREF <@refi64> %remv %nrem
    STORE <@refi64> %loc %obj
    %nrem2 = ADD <@i64> %nrem 1
    BRANCH %next
    
%next:
    %nrem3 = PHI <@i64> { %body: %nrem; %body2: %nrem2; }
    %i2 = ADD <@i64> %i 1
    BRANCH %head

%exit:
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}

.typedef @WRI64Cell = iref<@weakrefi64>

.funcsig @makestorewri64sig = @void (@WRI64Cell)

.funcdef @makestorewri64 <@makestorewri64sig> (%cell) {
    %ri64 = NEW <@i64>
    %iri64 = GETIREF <@i64> %ri64
    STORE <@i64> %iri64 42
    STORE <@weakrefi64> %cell %ri64
    RETVOID
}

.funcdef @peekweakref <@makestorewri64sig> (%cell) {
    %refval = LOAD <@weakrefi64> %cell
    %checknztrap = TRAP <@void> %exit %exit KEEPALIVE (%refval)

%exit:
    RETVOID
}

.funcdef @testweakref <@noparamsnoret> () {
    %irwr = ALLOCA <@weakrefi64>
    CALL <@makestorewri64sig> @makestorewri64 (%irwr)
    CALL <@makestorewri64sig> @peekweakref (%irwr)
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()
    
%next:
    %refval = LOAD <@weakrefi64> %irwr
    %checkztrap = TRAP <@void> %exit %exit KEEPALIVE (%refval)

%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

.typedef @i6 = int<6>

.const @I6_13 <@i6> = 13

.funcdef @maketr64intref <@tagref64 ()> () {
    %refi64 = NEW <@i64>
    %irefi64 = GETIREF <@i64> %refi64
    STORE <@i64> %irefi64 42
    %refv = REFCAST <@refi64 @refvoid> %refi64
    %tr = ICALL @uvm.tr64.from_ref (%refv @I6_13)
    RET <@tagref64> %tr
}

.funcdef @testtagrefgc <@noparamsnoret> () {
    %tr = CALL <@tagref64 ()> @maketr64intref ()
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()
    
%next:
    %refv = ICALL @uvm.tr64.to_ref(%tr)
    %tagv = ICALL @uvm.tr64.to_tag(%tr)
    %refi = REFCAST <@refvoid @refi64> %refv
    %irefi = GETIREF <@i64> %refi
    %iv = LOAD <@i64> %irefi
    %checktrap = TRAP <@void> %exit %exit KEEPALIVE (%tr %refv %tagv %iv)

%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}

.typedef @ireftr64 = iref<@tagref64>

.funcdef @settr64intref <@void (@ireftr64)> (%ireftr64) {
    %refi64 = NEW <@i64>
    %irefi64 = GETIREF <@i64> %refi64
    STORE <@i64> %irefi64 42
    %refv = REFCAST <@refi64 @refvoid> %refi64
    %tr = ICALL @uvm.tr64.from_ref (%refv @I6_13)
    
    STORE <@tagref64> %ireftr64 %tr
    RETVOID
}

.funcdef @testtagrefgcmem <@noparamsnoret> () {
    %ireftr64 = ALLOCA <@tagref64>
    CALL <@void (@ireftr64)> @settr64intref (%ireftr64)
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()
    
%next:
    %tr = LOAD <@tagref64> %ireftr64
    %refv = ICALL @uvm.tr64.to_ref(%tr)
    %tagv = ICALL @uvm.tr64.to_tag(%tr)
    %refi = REFCAST <@refvoid @refi64> %refv
    %irefi = GETIREF <@i64> %refi
    %iv = LOAD <@i64> %irefi
    %checktrap = TRAP <@void> %exit %exit KEEPALIVE (%tr %refv %tagv %iv)

%exit:
    ICALL @uvm.thread_exit ()
    THROW @NULLREF
}


.typedef @tr64array = hybrid <@void @tagref64>

.const @REM_SZ <@i64> = 2000
.const @REM_PER_ALLOC <@i64> = 100000
.const @NALLOCS <@i64> = 2000000

.funcdef @breadcrumbstr64 <@noparamsnoret> () {
%entry:
    %remember = NEWHYBRID <@tr64array> @REM_SZ
    %rememberiref = GETIREF <@tr64array> %remember
    %remv = GETVARPARTIREF <@tr64array> %rememberiref
    
    BRANCH %head
    
%head:
    %i = PHI <@i64> { %entry: 0; %next: %i2; }
    %nrem = PHI <@i64> { %entry: 0; %next: %nrem3; }
    %enough = SLT <@i64> %i @NALLOCS
    BRANCH2 %enough %body %exit

%body:
    %obj = NEW <@i64>
    %rem = SREM <@i64> %i @REM_PER_ALLOC
    %z = EQ <@i64> %rem 0
    BRANCH2 %z %body2 %next

%body2:
    %loc = SHIFTIREF <@tagref64> %remv %nrem
    %objv = REFCAST <@refi64 @refvoid> %obj
    %tr = ICALL @uvm.tr64.from_ref(%objv @I6_13)
    STORE <@tagref64> %loc %tr
    %nrem2 = ADD <@i64> %nrem 1
    BRANCH %next
    
%next:
    %nrem3 = PHI <@i64> { %body: %nrem; %body2: %nrem2; }
    %i2 = ADD <@i64> %i 1
    BRANCH %head

%exit:
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}